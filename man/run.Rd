\name{run}
\alias{run}
%- Also NEED an '\alias' for EACH other topic documented here.
\title{
Perform comparison of `nls` with other packages; functions for nonlinear least squares
}
\description{
This is the main function of the **nlsCompare** package. It compares with `nls` a solver (for e.g. `nlsr::nlxb` or `minpack.lm::nlsLM`) and uses different algorithms ( for e.g "marquardt", "plinear", "port") and controls from the "methods.csv" file. The names of the problems used in the comparsions are present in "problems.csv". The probelm statements, as of this writing, is in `R/test_files`.
}
\usage{
run(machid, spreadsheet, spreadsheet_error)
}
%- maybe also 'usage' for other objects documented here.
\arguments{
  \item{machid}{
Takes the machine ID generated by `machineId()`.
}
  \item{spreadsheet}{
Takes the dataframe generated by `create_db()`.
}
  \item{spreadsheet_error}{
Takes the dataframe generated by `create_elog()`.
}
}
\details{
%%  ~~ If necessary, more details than the description above ~~
}
\value{
%%  ~Describe the value returned
%%  If it is a LIST, use
%%  \item{comp1 }{Description of 'comp1'}
%%  \item{comp2 }{Description of 'comp2'}
%% ...
}
\references{
%% ~put references to the literature/web site here ~
}
\author{
%%  ~~who you are~~
}
\note{
%%  ~~further notes~~
}

%% ~Make other sections like Warning with \section{Warning }{....} ~

\seealso{
%% ~~objects to See Also as \code{\link{help}}, ~~~
}
\examples{
##---- Should be DIRECTLY executable !! ----
##-- ==>  Define data, use random,
##--	or do  help(data=index)  for the standard data sets.

## The function is currently defined as
function (machid, spreadsheet, spreadsheet_error)
{
    NLSproblems <- read.table(system.file("extdata", "problems.csv",
        package = "nlsCompare"), header = TRUE, sep = ",")
    NLSmethods <- read.table(system.file("extdata", "methods.csv",
        package = "nlsCompare"), header = TRUE, sep = ",")
    problemNumber <- 1
    errorNumber <- 1
    for (i in 1:nrow(NLSproblems)) {
        source(system.file("scripts", NLSproblems$Name[i], package = "nlsCompare"))
        for (j in 1:nrow(NLSmethods)) {
            errorNLSFlag <- 0
            errorOtherFlag <- 0
            NLSrunline <- "(formula=NLSformula, data=NLSdata, start=NLSstart,\n\t\t\t\t\tlower=NLSlower,upper=NLSupper,\n\t\t\t\t\tweights=NLSweights,\n\t\t\t\t\tsubset=NLSsubset,\n\t\t\t\t\t#na.action=\n\t\t\t\t\talgorithm=NLSmethods$algorithm[j],\n\t\t\t\t\tcontrol=eval(parse(text=NLSmethods$control[j])))"
            NLSrunline0 <- "(formula=NLSformula, data=NLSdata, start=NLSstart,\n\t\t\t\t\tlower=NLSlower,upper=NLSupper,\n\t\t\t\t\tweights=NLSweights,\n\t\t\t\t\tsubset=NLSsubset,\n\t\t\t\t\t#na.action=\n\t\t\t\t\tcontrol=eval(parse(text=NLSmethods$control[j])))"
            if (NLSmethods$algorithm[j] == "marquardt") {
                checker.nls <- try(output_nls <- eval(parse(text = paste("nls",
                  NLSrunline0))), silent = TRUE)
            }
            else {
                checker.nls <- try(output_nls <- eval(parse(text = paste("nls",
                  NLSrunline))), silent = TRUE)
            }
            if (inherits(checker.nls, "try-error")) {
                errorNLSFlag = errorNLSFlag + 1
            }
            checker.other <- try(output <- eval(parse(text = paste(NLSmethods[j,
                1], NLSrunline))), silent = TRUE)
            if (inherits(checker.other, "try-error")) {
                errorOtherFlag = errorOtherFlag + 1
            }
            if (errorNLSFlag == 1 | errorOtherFlag == 1) {
                errorNumber <- errorNumber + 1
                spreadsheet_error[errorNumber, 3] <<- NLSmethods[j,
                  1]
                spreadsheet_error[errorNumber, 5] <<- NLSmethods[j,
                  2]
                spreadsheet_error[errorNumber, 6] <<- NLSmethods[j,
                  3]
                spreadsheet_error[errorNumber, 8] <<- machid
                spreadsheet_error[errorNumber, 2] <<- NLSproblems$Name[i]
                spreadsheet_error[errorNumber, 1] <<- format(Sys.time(),
                  "\%Y-\%m-\%d \%H:\%M")
                if (errorNLSFlag == 1 & errorOtherFlag == 0) {
                  spreadsheet_error[errorNumber, 4] <<- "NLS fails."
                  spreadsheet_error[errorNumber, 7] <<- attr(checker.nls,
                    "condition")$message
                }
                else if (errorNLSFlag == 0 & errorOtherFlag ==
                  1) {
                  spreadsheet_error[errorNumber, 4] <<- paste(NLSmethods$solver[j],
                    " fails.", sep = "")
                  spreadsheet_error[errorNumber, 7] <<- attr(checker.other,
                    "condition")$message
                }
                else if (errorNLSFlag == 1 & errorOtherFlag ==
                  1) {
                  spreadsheet_error[errorNumber, 7] <<- paste(attr(checker.nls,
                    "condition")$message, attr(checker.other,
                    "condition")$message, sep = "|")
                  spreadsheet_error[errorNumber, 4] <<- "Both fail."
                }
                next
            }
            epstol <- sqrt(.Machine$double.eps * 100)
            checker.resid <- try(Residuals <- all.equal(as.vector(resid(output_nls)),
                as.vector(resid(output)), tolerance = epstol *
                  (max(abs(c(as.vector(resid(output_nls)), as.vector(resid(output))))) +
                    epstol)))
            if (inherits(checker.resid, "try-error")) {
                Residuals <- attr(checker.resid, "condition")$message
            }
            checker.dev <- try(Deviance <- all.equal(deviance(output_nls),
                deviance(output)))
            if (inherits(checker.dev, "try-error")) {
                Deviance <- attr(checker.dev, "condition")$message
            }
            checker.grad <- try(Gradient <- all.equal(output_nls$m$gradient(),
                output$m$gradient()))
            if (inherits(checker.grad, "try-error")) {
                Gradient <- attr(checker.grad, "condition")$message
            }
            checker.pars <- try(Parameters <- all.equal(output_nls$m$getPars(),
                output$m$getPars()))
            if (inherits(checker.pars, "try-error")) {
                Parameters <- attr(checker.pars, "condition")$message
            }
            checker.rmat <- try(Rmat <- all.equal(as.numeric(output_nls$m$Rmat()),
                as.numeric(output$m$Rmat())))
            if (inherits(checker.rmat, "try-error")) {
                Rmat <- attr(checker.rmat, "condition")$message
            }
            checker.conv <- try(Convergence <- all.equal(as.numeric(output_nls$convInfo$isConv),
                as.numeric(ifelse(NLSmethods[j, 1] == "minpack.lm::nlsLM",
                  output$convInfo$isConv, output$convInfo))))
            if (inherits(checker.conv, "try-error")) {
                Convergence <- attr(checker.conv, "condition")$message
            }
            spreadsheet[problemNumber, 3] <<- NLSmethods[j, 1]
            spreadsheet[problemNumber, 4] <<- NLSmethods[j, 2]
            spreadsheet[problemNumber, 5] <<- NLSmethods[j, 3]
            spreadsheet[problemNumber, 14] <<- machid
            spreadsheet[problemNumber, 2] <<- NLSproblems$Name[i]
            spreadsheet[problemNumber, 6] <<- Residuals
            spreadsheet[problemNumber, 7] <<- Deviance
            spreadsheet[problemNumber, 8] <<- Gradient
            spreadsheet[problemNumber, 9] <<- Parameters
            spreadsheet[problemNumber, 10] <<- Rmat
            spreadsheet[problemNumber, 11] <<- Convergence
            spreadsheet[problemNumber, 12] <<- ifelse(isTRUE(all.equal(as.numeric(c(Residuals,
                Deviance, Gradient, Parameters, Rmat, Convergence)),
                rep(1, 6))), "Passed", ifelse(isTRUE(all.equal(as.numeric(c(Residuals,
                Deviance, Parameters, Rmat, Convergence)), rep(0,
                6))), "Failed", "Indeterminate"))
            spreadsheet[problemNumber, 1] <<- format(Sys.time(),
                "\%Y-\%m-\%d \%H:\%M")
            (problemNumber <- problemNumber + 1)
        }
        cat("Successful problem-->", i, "\n")
    }
  }
}
% Add one or more standard keywords, see file 'KEYWORDS' in the
% R documentation directory (show via RShowDoc("KEYWORDS")):
% \keyword{ ~kwd1 }
% \keyword{ ~kwd2 }
% Use only one keyword per line.
% For non-standard keywords, use \concept instead of \keyword:
% \concept{ ~cpt1 }
% \concept{ ~cpt2 }
% Use only one concept per line.
